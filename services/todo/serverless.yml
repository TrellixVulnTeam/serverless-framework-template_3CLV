service: project-name-todo # stack name in cfn
package:
  individually: true # whether to select artifacts manually - zip files
projectDir: ./
frameworkVersion: ">=2.66.2 <3.0.0"

# manage your values here, no reserved keywords here
custom:
  lambdaLayerVersion: 4 # Update when changes
  commonMappings: ${file(../../serverless.common.yml):custom} # importing common values
  todoBucketName: # the "database"
    "Fn::ImportValue": "${self:custom.commonMappings.projectName}-TodoBucketName-${self:provider.stage}"

# everything under provider, is a reserved keyword, e.g environment, layers, etc.
provider:
  name: aws
  lambdaHashingVersion: 20201221
  runtime: ${self:custom.commonMappings.runtime.${self:provider.stage}} # nodejs, python, etc.
  stage: ${opt:stage} # supplied with: yarn deploy:dev (sls deploy --stage=dev)
  region: ${self:custom.commonMappings.region}
  memorySize: ${self:custom.commonMappings.memorySize.${self:provider.stage}}
  environment: # env vars that will be available in the functions
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    TODO_BUCKET_NAME: ${self:custom.todoBucketName}

  # this is the default role for each function, it allows logging only
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:logs"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "log-group:/aws/lambda/*:*:*"
  # the apigw that we previously created in shared-infra
  httpApi:
    id:
      Fn::ImportValue: ${self:custom.commonMappings.projectName}-ApiGatewayHttpId-${self:provider.stage}
    payload: ${self:custom.commonMappings.httpApiPayload.${self:provider.stage}}

  # this means ALL functions will use these layers
  layers:
    - !Sub "arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:layer:${self:custom.commonMappings.projectName}-todo-layer-${self:provider.stage}:${self:custom.lambdaLayerVersion}"
# finally define your functions here
functions:
  status:
    handler: index.status
    package:
      artifact: ./dist/dist-${self:provider.stage}.zip
    events:
      - httpApi:
          path: /todo/status
          method: GET
  create:
    handler: index.createItem # index.ts imports status from status.ts and exports status function
    role: todoCreateRole # a specific role which allows creating S3 objects
    package:
      artifact: ./dist/dist-${self:provider.stage}.zip # the package where the index.js is
    layers: # in case you need a specific layer, it's an array of layers ARNs
      - !Sub "arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:layer:${self:custom.commonMappings.projectName}-todo-layer-${self:provider.stage}:${self:custom.lambdaLayerVersion}"
    events: # when to trigger this function? in this case, only with an http event
      - httpApi:
          path: /todo/create
          method: POST

  get:
    handler: index.getItem
    role: todoGetRole
    package:
      artifact: ./dist/dist-${self:provider.stage}.zip
    events:
      - httpApi:
          path: /todo/get/{id}
          method: GET
  delete:
    handler: index.deleteItem
    role: todoDeleteRole
    package:
      artifact: ./dist/dist-${self:provider.stage}.zip
    events:
      - httpApi:
          path: /todo/delete/{id}
          method: DELETE
  list:
    handler: index.listItems
    role: todoListRole
    package:
      artifact: ./dist/dist-${self:provider.stage}.zip
    events:
      - httpApi:
          path: /todo/list
          method: GET
  update:
    handler: index.updateItem
    role: todoUpdateRole
    package:
      artifact: ./dist/dist-${self:provider.stage}.zip
    events:
      - httpApi:
          path: /todo/update
          method: POST

# all of your CloudFormation stuff goes under resources, including Resources, Outputs, Conditions, etc.
resources:
  Resources:
    # i've created a role per function, so we have the exact permission per function
    todoCreateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:PutObject
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todoBucketName}
                          - "*"
    todoUpdateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todoBucketName}
                          - "*"

    todoGetRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:GetObject*
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todoBucketName}
                          - "*"

    todoDeleteRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:DeleteObject
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todoBucketName}
                          - "*"

    todoListRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todoBucketName}
                          - "*"
